# set directory tempat simpan model naivebayes nya
# save model untuk di gunakan pada aplikasi
save(classifier , file = 'NaiveBayesClassifier.rda')
# test model naivebayes nya
pred <- predict(classifier, newdata=testNB)
# Buat table hasil prediksi
table("Predictions"= pred,  "Actual" = restaurant_review_test$class)
# Confusion Matrix
conf_mat <- confusionMatrix(pred, restaurant_review_test$class)
conf_mat$overall['Accuracy']
# Feature Selection, ambil kata yang muncul minimal 5 kali
fiveFreq <- findFreqTerms(dtm_train, 20)
length(fiveFreq)
# set directory tempat simpan feature yg digunakan
# save featurenya
saveRDS(fiveFreq, "features.rds")
# Sesuaikan fitur pada data train dan test dengan fitur yang sudah diseleksi sebelumnya
dtm_train_nb <- corpus_clean_train %>%
DocumentTermMatrix(control=list(dictionary = fiveFreq))
dtm_test_nb <- corpus_clean_test %>%
DocumentTermMatrix(control=list(dictionary = fiveFreq))
dim(dtm_train_nb)
dim(dtm_test_nb)
# Funsi untuk convert jumlah kemunculan kata jadi yes (ada) dan no (ga ada)
convert_count <- function(x) {
y <- ifelse(x > 0, 1,0)
y <- factor(y, levels=c(0,1), labels=c("No", "Yes"))
y
}
# Apply the convert_count function to get final training and testing DTMs
trainNB <- apply(dtm_train_nb, 2, convert_count)
testNB <- apply(dtm_test_nb, 2, convert_count)
view(testNB)
# Membuat model naive bayes dari data training
classifier <- naiveBayes(trainNB, restaurant_review_train$class, laplace = 1)
# set directory tempat simpan model naivebayes nya
# save model untuk di gunakan pada aplikasi
save(classifier , file = 'NaiveBayesClassifier.rda')
# test model naivebayes nya
pred <- predict(classifier, newdata=testNB)
# Buat table hasil prediksi
table("Predictions"= pred,  "Actual" = restaurant_review_test$class)
# Confusion Matrix
conf_mat <- confusionMatrix(pred, restaurant_review_test$class)
conf_mat$overall['Accuracy']
# Feature Selection, ambil kata yang muncul minimal 5 kali
fiveFreq <- findFreqTerms(dtm_train, 5)
length(fiveFreq)
# set directory tempat simpan feature yg digunakan
# save featurenya
saveRDS(fiveFreq, "features.rds")
# Sesuaikan fitur pada data train dan test dengan fitur yang sudah diseleksi sebelumnya
dtm_train_nb <- corpus_clean_train %>%
DocumentTermMatrix(control=list(dictionary = fiveFreq))
dtm_test_nb <- corpus_clean_test %>%
DocumentTermMatrix(control=list(dictionary = fiveFreq))
dim(dtm_train_nb)
dim(dtm_test_nb)
# Funsi untuk convert jumlah kemunculan kata jadi yes (ada) dan no (ga ada)
convert_count <- function(x) {
y <- ifelse(x > 0, 1,0)
y <- factor(y, levels=c(0,1), labels=c("No", "Yes"))
y
}
# Apply the convert_count function to get final training and testing DTMs
trainNB <- apply(dtm_train_nb, 2, convert_count)
testNB <- apply(dtm_test_nb, 2, convert_count)
view(testNB)
# Membuat model naive bayes dari data training
classifier <- naiveBayes(trainNB, restaurant_review_train$class, laplace = 1)
# set directory tempat simpan model naivebayes nya
# save model untuk di gunakan pada aplikasi
save(classifier , file = 'NaiveBayesClassifier.rda')
# test model naivebayes nya
pred <- predict(classifier, newdata=testNB)
# Buat table hasil prediksi
table("Predictions"= pred,  "Actual" = restaurant_review_test$class)
# Confusion Matrix
conf_mat <- confusionMatrix(pred, restaurant_review_test$class)
conf_mat$overall['Accuracy']
# Feature Selection, ambil kata yang muncul minimal 10 kali
fiveFreq <- findFreqTerms(dtm_train, 10)
length(fiveFreq)
# set directory tempat simpan feature yg digunakan
# save featurenya
saveRDS(fiveFreq, "features.rds")
# Sesuaikan fitur pada data train dan test dengan fitur yang sudah diseleksi sebelumnya
dtm_train_nb <- corpus_clean_train %>%
DocumentTermMatrix(control=list(dictionary = fiveFreq))
dtm_test_nb <- corpus_clean_test %>%
DocumentTermMatrix(control=list(dictionary = fiveFreq))
dim(dtm_train_nb)
dim(dtm_test_nb)
# Funsi untuk convert jumlah kemunculan kata jadi yes (ada) dan no (ga ada)
convert_count <- function(x) {
y <- ifelse(x > 0, 1,0)
y <- factor(y, levels=c(0,1), labels=c("No", "Yes"))
y
}
# Apply the convert_count function to get final training and testing DTMs
trainNB <- apply(dtm_train_nb, 2, convert_count)
testNB <- apply(dtm_test_nb, 2, convert_count)
view(testNB)
# Membuat model naive bayes dari data training
classifier <- naiveBayes(trainNB, restaurant_review_train$class, laplace = 1)
# set directory tempat simpan model naivebayes nya
# save model untuk di gunakan pada aplikasi
save(classifier , file = 'NaiveBayesClassifier.rda')
# test model naivebayes nya
pred <- predict(classifier, newdata=testNB)
# Buat table hasil prediksi
table("Predictions"= pred,  "Actual" = restaurant_review_test$class)
# Confusion Matrix
conf_mat <- confusionMatrix(pred, restaurant_review_test$class)
conf_mat$overall['Accuracy']
shinyApp(ui, server)
#install
install.packages("shinycssloaders")
# Load library
library(shiny)
library(shinycssloaders)
library(wordcloud2)
library(ggplot2)
library(shinydashboard)
library(dplyr)
library(tidytext)
library(DT)
nbClassifier <- load("NaiveBayesClassifier.rda")
restaurant <- readRDS("restaurant.rds")
source("restaurantreviews.R")
source("featureExtraction.R")
ui <- dashboardPage(
dashboardHeader(title = "Restaurant Review"),
dashboardSidebar(
selectInput(
"selectRestaurant",
label = h3("Pilih Restaurant"),
setNames(restaurant$link, restaurant$name)
),
fluidPage(
submitButton("Submit"),
hr(),
helpText(
"Data review hotel akan diambil langsung (scraping) dari website ",
a("Tripadvisor", href = "https://www.tripadvisor.com/"),
". Mohon tunggu beberapa saat."
),
hr(),
helpText(
"Review hotel yang di-scrape akan di klasifikasikan dengan Naive Bayes"
),
hr(),
helpText(
"Peringatan: Mungkin terjadi lost connection saat scraping data. Refresh halaman jika terjadi error.", style = "color:#d9534f"
)
)
),
dashboardBody(
fluidRow(
valueBoxOutput("total_review"),
valueBoxOutput("happy_review"),
valueBoxOutput("not_happy_review")
),
fluidRow(
box(
title = "Restaurant review dan Klasifikasi Sentiment",
solidHeader = T,
width = 12,
collapsible = T,
div(DT::dataTableOutput("table_review") %>% withSpinner(color="#1167b1"), style = "font-size: 70%;")
),
),
fluidRow(
box(title = "Wordcloud",
solidHeader = T,
width = 6,
collapsible = T,
wordcloud2Output("wordcloud") %>% withSpinner(color="#1167b1")
),
box(title = "Word Count",
solidHeader = T,
width = 6,
collapsible = T,
plotOutput("word_count") %>% withSpinner(color="#1167b1")
)
),
fluidRow(
box(title = "Sentimen Negatif / Positif yang Paling Umum",
solidHeader = T,
width = 12,
collapsible = T,
plotOutput("kontribusi_sentimen") %>% withSpinner(color="#1167b1")
)
)
)
)
server <- function(input, output) {
data <- reactive({
get_restaurant_reviews(input$selectRestaurant)
})
dataNB <- reactive({
reviews <- data()$Review
withProgress({
setProgress(message = "Proses Ekstraksi Fitur...")
newData <- extract_feature(reviews)
})
withProgress({
setProgress(message = "Klasifikasi...")
pred <- predict(get(nbClassifier), newData)
})
data.frame(Nama = data()$Nama, Review = data()$Review, Prediksi = as.factor(pred), stringsAsFactors = FALSE)
})
dataWord <- reactive({
v <- sort(colSums(as.matrix(create_dtm(data()$Review))), decreasing = TRUE)
data.frame(Kata=names(v), Jumlah=as.integer(v), row.names=NULL, stringsAsFactors = FALSE) %>%
filter(Jumlah > 0)
})
output$table_review <- renderDataTable(datatable({
dataNB()
}))
output$total_review <- renderValueBox({
valueBox(
"Total",
paste0(nrow(dataNB()), " review"),
icon = icon("pen"),
color = "green"
)
})
output$happy_review <- renderValueBox({
valueBox(
"Happy",
paste0(nrow(dataNB() %>% filter(Prediksi == "1")), " pengunjung merasa senang"),
icon = icon("smile"),
color = "blue")
})
output$not_happy_review <- renderValueBox({
valueBox(
"Not Happy",
paste0(nrow(dataNB() %>% filter(Prediksi == "0")), " pengunjung merasa tidak senang"),
icon = icon("frown"),
color = "black")
})
output$wordcloud <- renderWordcloud2({
wordcloud2(top_n(dataWord(), 50, Jumlah))
})
output$word_count <- renderPlot({
countedWord <- dataWord() %>%
top_n(10, Jumlah) %>%
mutate(Kata = reorder(Kata, Jumlah))
ggplot(countedWord, aes(Kata, Jumlah, fill = -Jumlah)) +
geom_col() +
guides(fill = FALSE) +
theme_minimal()+
labs(x = NULL, y = "Word Count") +
ggtitle("Most Frequent Words") +
coord_flip()
})
output$kontribusi_sentimen <- renderPlot({
sentiments <- dataWord() %>%
inner_join(get_sentiments("bing"), by = c("Kata" = "word"))
positive <- sentiments %>% filter(sentiment == "positive") %>% top_n(10, Jumlah)
negative <- sentiments %>% filter(sentiment == "negative") %>% top_n(10, Jumlah)
sentiments <- rbind(positive, negative)
sentiments <- sentiments %>%
mutate(Jumlah=ifelse(sentiment =="negative", -Jumlah, Jumlah))%>%
mutate(Kata = reorder(Kata, Jumlah))
ggplot(sentiments, aes(Kata, Jumlah, fill=sentiment))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab("Kontibusi Sentimen")
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Restaurant Review"),
dashboardSidebar(
selectInput(
"selectRestaurant",
label = h3("Pilih Restaurant"),
setNames(restaurant$link, restaurant$name)
),
fluidPage(
submitButton("Submit"),
hr(),
helpText(
"Data review hotel akan diambil langsung (scraping) dari website ",
a("Tripadvisor", href = "https://www.tripadvisor.com/"),
". Mohon tunggu beberapa saat."
),
hr(),
helpText(
"Review hotel yang di-scrape akan di klasifikasikan dengan Naive Bayes"
),
hr(),
helpText(
"Peringatan: Mungkin terjadi lost connection saat scraping data. Refresh halaman jika terjadi error.", style = "color:#d9534f"
)
)
),
dashboardBody(
fluidRow(
valueBoxOutput("total_review"),
valueBoxOutput("happy_review"),
valueBoxOutput("not_happy_review")
),
fluidRow(
box(
title = "Restaurant review dan Klasifikasi Sentiment",
solidHeader = T,
width = 12,
collapsible = T,
div(DT::dataTableOutput("table_review") %>% withSpinner(color="#1167b1"), style = "font-size: 70%;")
),
),
fluidRow(
box(title = "Wordcloud",
solidHeader = T,
width = 6,
collapsible = T,
wordcloud2Output("wordcloud") %>% withSpinner(color="#1167b1")
),
box(title = "Word Count",
solidHeader = T,
width = 6,
collapsible = T,
plotOutput("word_count") %>% withSpinner(color="#1167b1")
)
),
fluidRow(
box(title = "Sentimen Negatif / Positif yang Paling Umum",
solidHeader = T,
width = 12,
collapsible = T,
plotOutput("kontribusi_sentimen") %>% withSpinner(color="#1167b1")
)
)
)
)
restaurant <- readRDS("restaurant.rds")
nbClassifier <- load("NaiveBayesClassifier.rda")
# Load library
library(shiny)
library(shinycssloaders)
library(wordcloud2)
library(ggplot2)
library(shinydashboard)
library(dplyr)
library(tidytext)
library(DT)
nbClassifier <- load("NaiveBayesClassifier.rda")
shiny::runApp('projek')
# Load library
library(rvest)
library(corpus)
library(shiny)
library(shinycssloaders)
library(wordcloud2)
library(ggplot2)
library(shinydashboard)
library(dplyr)
library(tidytext)
library(DT)
nbClassifier <- load("NaiveBayesClassifier.rda")
restaurant <- readRDS("restaurant.rds")
source("restaurantreviews.R")
source("featureExtraction.R")
ui <- dashboardPage(
dashboardHeader(title = "Paris Restaurant Review"),
dashboardSidebar(
selectInput(
"selectRestaurant",
label = h3("Pilih Restaurant"),
setNames(restaurant$link, restaurant$name)
),
fluidPage(
submitButton("Submit"),
hr(),
helpText(
"Data review hotel akan diambil langsung (scraping) dari website ",
a("Tripadvisor", href = "https://www.tripadvisor.com/"),
". Mohon tunggu beberapa saat."
),
hr(),
helpText(
"Review hotel yang di-scrape akan di klasifikasikan dengan Naive Bayes"
),
hr(),
helpText(
"Peringatan: Mungkin terjadi lost connection saat scraping data. Refresh halaman jika terjadi error.", style = "color:#d9534f"
)
)
),
dashboardBody(
fluidRow(
valueBoxOutput("total_review"),
valueBoxOutput("happy_review"),
valueBoxOutput("not_happy_review")
),
fluidRow(
box(
title = "Paris Restaurant review dan Klasifikasi Sentiment",
solidHeader = T,
width = 12,
collapsible = T,
div(DT::dataTableOutput("table_review") %>% withSpinner(color="#1167b1"), style = "font-size: 70%;")
),
),
fluidRow(
box(title = "Wordcloud",
solidHeader = T,
width = 6,
collapsible = T,
wordcloud2Output("wordcloud") %>% withSpinner(color="#1167b1")
),
box(title = "Word Count",
solidHeader = T,
width = 6,
collapsible = T,
plotOutput("word_count") %>% withSpinner(color="#1167b1")
)
),
fluidRow(
box(title = "Sentimen Negatif / Positif yang Paling Umum",
solidHeader = T,
width = 12,
collapsible = T,
plotOutput("kontribusi_sentimen") %>% withSpinner(color="#1167b1")
)
)
)
)
server <- function(input, output) {
data <- reactive({
get_restaurant_reviews(input$selectRestaurant)
})
dataNB <- reactive({
reviews <- data()$Review
withProgress({
setProgress(message = "Proses Ekstraksi Fitur...")
newData <- extract_feature(reviews)
})
withProgress({
setProgress(message = "Klasifikasi...")
pred <- predict(get(nbClassifier), newData)
})
data.frame(name = data()$name, Review = data()$Review, Prediksi = as.factor(pred), stringsAsFactors = FALSE)
})
dataWord <- reactive({
v <- sort(colSums(as.matrix(create_dtm(data()$Review))), decreasing = TRUE)
data.frame(Kata=names(v), Jumlah=as.integer(v), row.names=NULL, stringsAsFactors = FALSE) %>%
filter(Jumlah > 0)
})
output$table_review <- renderDataTable(datatable({
dataNB()
}))
output$total_review <- renderValueBox({
valueBox(
"Total",
paste0(nrow(dataNB()), " review"),
icon = icon("pen"),
color = "green"
)
})
output$happy_review <- renderValueBox({
valueBox(
"Satisfied",
paste0(nrow(dataNB() %>% filter(Prediksi == "1")), " pengunjung merasa senang"),
icon = icon("smile"),
color = "blue")
})
output$not_happy_review <- renderValueBox({
valueBox(
"Unsatisfied",
paste0(nrow(dataNB() %>% filter(Prediksi == "0")), " pengunjung merasa tidak senang"),
icon = icon("frown"),
color = "black")
})
output$wordcloud <- renderWordcloud2({
wordcloud2(top_n(dataWord(), 50, Jumlah))
})
output$word_count <- renderPlot({
countedWord <- dataWord() %>%
top_n(10, Jumlah) %>%
mutate(Kata = reorder(Kata, Jumlah))
ggplot(countedWord, aes(Kata, Jumlah, fill = -Jumlah)) +
geom_col() +
guides(fill = FALSE) +
theme_minimal()+
labs(x = NULL, y = "Word Count") +
ggtitle("Most Frequent Words") +
coord_flip()
})
output$kontribusi_sentimen <- renderPlot({
sentiments <- dataWord() %>%
inner_join(get_sentiments("bing"), by = c("Kata" = "word"))
positive <- sentiments %>% filter(sentiment == "positive") %>% top_n(10, Jumlah)
negative <- sentiments %>% filter(sentiment == "negative") %>% top_n(10, Jumlah)
sentiments <- rbind(positive, negative)
sentiments <- sentiments %>%
mutate(Jumlah=ifelse(sentiment =="negative", -Jumlah, Jumlah))%>%
mutate(Kata = reorder(Kata, Jumlah))
ggplot(sentiments, aes(Kata, Jumlah, fill=sentiment))+
geom_bar(stat = "identity")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
ylab("Kontibusi Sentimen")
})
}
shinyApp(ui, server)
#install
#install.packages("RTextTools")
install.packages("tm")
shiny::runApp()
